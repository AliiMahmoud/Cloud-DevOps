AWSTemplateFormatVersion: 2010-09-09

Description: >
  Udacity - Network infrastructure for an high-availability web app
    This template deploys a VPC, with a pair subnets public and private.
    It deploys an Internet Gateway, with a default 
    route on the public subnet. It deploys a NAT Gateway and default route for it in the private subnet.

Parameters:
  EnvironmentName:
    Description: An environment name to be prefix to the resources 
    Type: String
  VpcCIDR:
    Description: The VPC CIDR Block - IP Range 
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidr:
    Description: The public Subnet1 CIDR Block - IP Range 
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnetCidr:
    Description: The Private Subnet1 CIDR Block - IP Range 
    Type: String
    Default: 10.0.2.0/24

Resources:
  # VPC To Deploy Resources inside of it
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  # Internet Gateway for world's inboud and outboud traffic
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  # Attaching the Gateway to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC


############################################################
#  Creating Private and public subnet
############################################################

  # Public Subnet 
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public subnet
  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private subnet
############################################################
#  Creating the NAT-Gateway with EIP for Private subnet
############################################################
  
  # EIP For NAT Gateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  # NAT gateway For resources in private subnet
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatGatewayEIP.AllocationId


  # Creating a Public Route table for the public subnets
  ###################################################
  #  Route Table for public subnet
  ###################################################
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Public Route Table
  # Public Route Table Rules
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associating the routing table to the public subnet 
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  
  ###################################################
  #  Route Table for Private subnet
  ###################################################
  
  # Creating a Private Route table for Private Subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} - Private Route Table for subnet
  # Private Route Table Rules for subnet
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  # Associating the routing table to the private subnet
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
